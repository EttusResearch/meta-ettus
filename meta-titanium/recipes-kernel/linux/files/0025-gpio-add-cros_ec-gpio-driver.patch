From e134c4d8e9c328ebb75ec35753c4558a2c4a66e4 Mon Sep 17 00:00:00 2001
From: Michael Auchter <michael.auchter@ni.com>
Date: Mon, 16 Dec 2019 10:55:20 -0600
Subject: [PATCH 25/47] gpio: add cros_ec gpio driver

This adds a driver to support host-controllable GPIOs implemented in a
device running Chromium EC.

Signed-off-by: Michael Auchter <michael.auchter@ni.com>
---
 drivers/gpio/Kconfig                          |   6 +
 drivers/gpio/Makefile                         |   1 +
 drivers/gpio/gpio-cros_ec.c                   | 228 ++++++++++++++++++
 .../linux/platform_data/cros_ec_commands.h    |  35 +++
 4 files changed, 270 insertions(+)
 create mode 100644 drivers/gpio/gpio-cros_ec.c

diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index 14751c7ccd1f..5f51c5e21c46 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -1097,6 +1097,12 @@ config GPIO_BD9571MWV
 	  This driver can also be built as a module. If so, the module
 	  will be called gpio-bd9571mwv.
 
+config GPIO_CROS_EC
+	tristate "GPIO support for Chromium EC"
+	depends on CROS_EC
+	help
+	  Support for GPIOs implemented on a device running Chromium EC.
+
 config GPIO_CRYSTAL_COVE
 	tristate "GPIO support for Crystal Cove PMIC"
 	depends on (X86 || COMPILE_TEST) && INTEL_SOC_PMIC
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 09dada80ac34..3cd74e365ace 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -46,6 +46,7 @@ obj-$(CONFIG_GPIO_BT8XX)		+= gpio-bt8xx.o
 obj-$(CONFIG_GPIO_CADENCE)		+= gpio-cadence.o
 obj-$(CONFIG_GPIO_CLPS711X)		+= gpio-clps711x.o
 obj-$(CONFIG_GPIO_SNPS_CREG)		+= gpio-creg-snps.o
+obj-$(CONFIG_GPIO_CROS_EC)		+= gpio-cros_ec.o
 obj-$(CONFIG_GPIO_CRYSTAL_COVE)		+= gpio-crystalcove.o
 obj-$(CONFIG_GPIO_CS5535)		+= gpio-cs5535.o
 obj-$(CONFIG_GPIO_DA9052)		+= gpio-da9052.o
diff --git a/drivers/gpio/gpio-cros_ec.c b/drivers/gpio/gpio-cros_ec.c
new file mode 100644
index 000000000000..30f32945b457
--- /dev/null
+++ b/drivers/gpio/gpio-cros_ec.c
@@ -0,0 +1,228 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * gpio-cros_ec.c - GPIO support for Chromium EC
+ *
+ * Copyright 2019 National Instruments Corporation
+ * Author: Michael Auchter <michael.auchter@ni.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ */
+
+#include <linux/gpio/driver.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of_platform.h>
+#include <linux/platform_data/cros_ec_proto.h>
+#include <linux/platform_data/cros_ec_commands.h>
+
+#define CROS_EC_GPIO_INPUT	BIT(4)
+#define CROS_EC_GPIO_OUTPUT	BIT(5)
+
+struct cros_ec_gpio_info {
+	char name[32];
+	uint32_t flags;
+};
+
+struct cros_ec_gpio_priv {
+	struct gpio_chip gpio_chip;
+	struct cros_ec_device *ec;
+	struct cros_ec_gpio_info *gpio_info;
+	const char **names;
+};
+
+struct cros_ec_query_cmd {
+	struct cros_ec_command msg;
+	union {
+		struct ec_params_host_gpio_query params;
+		struct ec_response_host_gpio_query resp;
+	};
+} __packed;
+
+struct cros_ec_set_cmd {
+	struct cros_ec_command msg;
+	struct ec_params_host_gpio_set params;
+} __packed;
+
+
+static int cros_ec_gpio_count(struct cros_ec_gpio_priv *priv, int *count)
+{
+	struct cros_ec_query_cmd cmd = {};
+	int ret;
+
+	cmd.msg.version = 0;
+	cmd.msg.command = EC_CMD_HOST_GPIO_QUERY;
+	cmd.msg.outsize = sizeof(cmd.params);
+	cmd.msg.insize = sizeof(cmd.resp);
+
+	cmd.params.subcmd = EC_HOST_GPIO_GET_COUNT;
+
+	ret = cros_ec_cmd_xfer_status(priv->ec, &cmd.msg);
+	if (ret < 0)
+		return ret;
+
+	*count = cmd.resp.get_count.val;
+
+	return 0;
+}
+
+static int cros_ec_gpio_info(struct cros_ec_gpio_priv *priv, uint8_t index,
+			     struct cros_ec_gpio_info *info)
+{
+	struct cros_ec_query_cmd cmd = {};
+	int ret;
+
+	cmd.msg.version = 0;
+	cmd.msg.command = EC_CMD_HOST_GPIO_QUERY;
+	cmd.msg.outsize = sizeof(cmd.params);
+	cmd.msg.insize = sizeof(cmd.resp);
+
+	cmd.params.subcmd = EC_HOST_GPIO_GET_INFO;
+	cmd.params.index = index;
+
+	ret = cros_ec_cmd_xfer_status(priv->ec, &cmd.msg);
+	if (ret < 0)
+		return ret;
+
+	info->flags = cmd.resp.get_info.flags;
+	strscpy(info->name, cmd.resp.get_info.name, sizeof(info->name));
+
+	return 0;
+}
+
+static int cros_ec_gpio_get_direction(struct gpio_chip *gc, unsigned off)
+{
+	struct cros_ec_gpio_priv *priv = gpiochip_get_data(gc);
+	uint32_t flags;
+
+	flags = priv->gpio_info[off].flags;
+
+	if (flags & CROS_EC_GPIO_INPUT)
+		return 1;
+
+	return 0;
+}
+
+static int cros_ec_gpio_get(struct gpio_chip *gc, unsigned off)
+{
+	struct cros_ec_gpio_priv *priv = gpiochip_get_data(gc);
+	struct cros_ec_query_cmd cmd = {};
+	int ret;
+
+	cmd.msg.version = 0;
+	cmd.msg.command = EC_CMD_HOST_GPIO_QUERY;
+	cmd.msg.outsize = sizeof(cmd.params);
+	cmd.msg.insize = sizeof(cmd.resp);
+
+	cmd.params.subcmd = EC_HOST_GPIO_GET_STATE;
+	cmd.params.index = off;
+
+	ret = cros_ec_cmd_xfer_status(priv->ec, &cmd.msg);
+	if (ret < 0)
+		return ret;
+
+	return cmd.resp.get_state.val;
+}
+
+static void cros_ec_gpio_set(struct gpio_chip *gc, unsigned off, int val)
+{
+	struct cros_ec_gpio_priv *priv = gpiochip_get_data(gc);
+	struct cros_ec_set_cmd cmd = {};
+	int ret;
+
+	cmd.msg.version = 0;
+	cmd.msg.command = EC_CMD_HOST_GPIO_SET;
+	cmd.msg.outsize = sizeof(cmd.params);
+
+	cmd.params.index = off;
+	cmd.params.val = val;
+
+	ret = cros_ec_cmd_xfer_status(priv->ec, &cmd.msg);
+	if (ret < 0)
+		dev_err(gc->parent, "gpio set failed: %d\n", ret);
+}
+
+static int cros_ec_gpio_probe(struct platform_device *pdev)
+{
+	struct cros_ec_device *ec = dev_get_drvdata(pdev->dev.parent);
+	struct cros_ec_gpio_priv *priv;
+	struct gpio_chip *gc;
+	int ret, ngpio, i;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+	priv->ec = ec;
+
+	ret = cros_ec_gpio_count(priv, &ngpio);
+	if (ret)
+		return ret;
+
+	priv->gpio_info = devm_kcalloc(&pdev->dev, ngpio,
+				       sizeof(*priv->gpio_info), GFP_KERNEL);
+	if (!priv->gpio_info)
+		return -ENOMEM;
+
+	priv->names = devm_kcalloc(&pdev->dev, ngpio, sizeof(const char *),
+				   GFP_KERNEL);
+	if (!priv->names)
+		return -ENOMEM;
+
+	for (i = 0; i < ngpio; i++) {
+		ret = cros_ec_gpio_info(priv, i, &priv->gpio_info[i]);
+		if (ret)
+			return ret;
+		priv->names[i] = priv->gpio_info[i].name;
+	}
+
+	gc = &priv->gpio_chip;
+
+	gc->base = -1;
+	gc->of_node = pdev->dev.of_node;
+	gc->ngpio = ngpio;
+	gc->label = dev_name(&pdev->dev);
+	gc->owner = THIS_MODULE;
+	gc->names = priv->names;
+	gc->can_sleep = true;
+
+	gc->get_direction = cros_ec_gpio_get_direction;
+	gc->get = cros_ec_gpio_get;
+	gc->set = cros_ec_gpio_set;
+
+	return devm_gpiochip_add_data(&pdev->dev, gc, priv);
+}
+
+#if defined(CONFIG_OF)
+static const struct of_device_id cros_ec_gpio_of_match[] = {
+	{ .compatible = "ni,cros-ec-gpio", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, fixed_of_match);
+#endif
+
+static struct platform_driver cros_ec_gpio_driver = {
+	.probe		= cros_ec_gpio_probe,
+	.driver		= {
+		.name		= "gpio-cros-ec",
+		.of_match_table = of_match_ptr(cros_ec_gpio_of_match),
+	},
+};
+
+static int __init cros_ec_gpio_init(void)
+{
+	return platform_driver_register(&cros_ec_gpio_driver);
+}
+subsys_initcall(cros_ec_gpio_init);
+
+static void __exit cros_ec_gpio_exit(void)
+{
+	platform_driver_unregister(&cros_ec_gpio_driver);
+}
+module_exit(cros_ec_gpio_exit);
+
+MODULE_AUTHOR("Michael Auchter <michael.auchter@ni.com>");
+MODULE_DESCRIPTION("ChromiumEC GPIO driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:gpio-cros-ec");
diff --git a/include/linux/platform_data/cros_ec_commands.h b/include/linux/platform_data/cros_ec_commands.h
index a3a9a878415f..938b3f2183c9 100644
--- a/include/linux/platform_data/cros_ec_commands.h
+++ b/include/linux/platform_data/cros_ec_commands.h
@@ -3730,6 +3730,9 @@ enum gpio_get_subcmd {
 	EC_GPIO_GET_BY_NAME = 0,
 	EC_GPIO_GET_COUNT = 1,
 	EC_GPIO_GET_INFO = 2,
+	EC_GPIO_GET_IOEX_BY_NAME = 3,
+	EC_GPIO_GET_IOEX_COUNT = 4,
+	EC_GPIO_GET_IOEX_INFO = 5,
 };
 
 /*****************************************************************************/
@@ -5935,6 +5938,38 @@ struct ec_params_charger_control {
 #define EC_PRIVATE_HOST_COMMAND_VALUE(command) \
 	(EC_CMD_BOARD_SPECIFIC_BASE + (command))
 
+
+#define EC_CMD_HOST_GPIO_QUERY EC_PRIVATE_HOST_COMMAND_VALUE(0x0002)
+struct ec_params_host_gpio_query {
+	uint8_t subcmd;
+	uint8_t index;
+} __packed;
+
+struct ec_response_host_gpio_query {
+	union {
+		struct {
+			char name[32];
+			uint32_t flags;
+		} get_info;
+		struct {
+			uint8_t val;
+		} get_state, get_count;
+	};
+} __packed;
+
+enum host_gpio_query_subcmd {
+	EC_HOST_GPIO_GET_COUNT = 0,
+	EC_HOST_GPIO_GET_INFO = 1,
+	EC_HOST_GPIO_GET_STATE = 2,
+};
+
+#define EC_CMD_HOST_GPIO_SET EC_PRIVATE_HOST_COMMAND_VALUE(0x0003)
+struct ec_params_host_gpio_set {
+	uint8_t index;
+	uint8_t val;
+} __packed;
+
+
 /*****************************************************************************/
 /*
  * Passthru commands
-- 
2.29.2

