#!/usr/bin/env python3

from serial import Serial
import sys
import traceback
from enum import IntEnum
from utils import check_open_filehandles
from utils import get_config
from utils import remove_ansi
from utils import remove_ansi2

class PoweroffState(IntEnum):
    DetectState = 0
    LoggingIn = 1
    PoweringOff = 2
    PowerOffPending = 3
    PowerOffDone = 4


def try_poweroff(config, stm_uart, zynq_uart):
    f = open(config['poweroff_logfile'], "w")

    poweroff_state = PoweroffState(0)
    timeout=0
    errors_during_shutdown = False
    stop_job_running = False
    while True:
        line_bytes = zynq_uart.readline()
        try:
            line_utf8 = line_bytes.decode("utf-8")
            line = remove_ansi2(remove_ansi(line_utf8))
        except:
            print("*** unhandled characters - original line: ", end='')
            print(line_bytes)
            line_utf8 = remove_ansi2(remove_ansi(line_bytes.decode("utf-8", errors='ignore')))
            line = line_utf8

        if (line_bytes==b"\x00"):
            stm_uart.write(config['stm_shutdown_command'].encode()+b"\n")
            break
        elif len(line_utf8)>0:
            print(line_utf8, end='')
            f.write(line)
            timeout = 0
        else:
            timeout += config['default_timeout']

        #print(str(timeout))

        if (poweroff_state >= PoweroffState.DetectState) and \
           (poweroff_state < PoweroffState.PoweringOff):
            if timeout > config['poweroff_timeout']:
                stm_uart.write(config['stm_shutdown_command'].encode()+b"\n")
                break
            if len(line_utf8) == 0:
                zynq_uart.write(b"\n")
            elif line.find(" login: ") != -1:
                zynq_uart.write(b"root\n")
                poweroff_state = PoweroffState.LoggingIn
            elif line.startswith("root@") and line.endswith(":~# "):
                zynq_uart.write(b"poweroff\n")
                poweroff_state = PoweroffState.PoweringOff
        elif poweroff_state == PoweroffState.PoweringOff:
            if line.find("A stop job is running") != -1:
                stop_job_running = True

            if line.endswith("reboot: Power down\r\n") or \
                line.endswith("All filesystems unmounted.\r\n"):
                poweroff_state = PoweroffState.PowerOffPending

            if timeout>config['poweroff_timeout']:
                stm_uart.write(config['stm_shutdown_command'].encode()+b"\n")
                break
        elif poweroff_state == PoweroffState.PowerOffPending:
            if len(line_utf8) >= 14 and not (line_utf8[0] == '[' and line_utf8[13] == ']'):
                errors_during_shutdown = True

            if timeout>config['poweroff_timeout']:
                poweroff_state = PoweroffState.PowerOffDone
                stm_uart.write(config['stm_shutdown_command'].encode()+b"\n")
                break

    f.close()

    if poweroff_state != PoweroffState.PowerOffDone:
        raise RuntimeError("*** poweroff command not successful (stuck in state: {}) ***".format(poweroff_state.name))
    elif errors_during_shutdown:
        raise RuntimeError("*** poweroff command not successful (errors during shutdown) ***")
    elif stop_job_running:
        raise RuntimeError("*** poweroff command not successful (a stop job was running late) ***")
    else:
        print("\n\n*** poweroff command was successful ***")


def main(config):
    check_open_filehandles(config['stm_uart'])
    stm_uart = Serial(config['stm_uart'], 115200, timeout=config['default_timeout'])
    check_open_filehandles(config['zynq_uart'])
    zynq_uart = Serial(config['zynq_uart'], 115200, timeout=config['default_timeout'])

    try:
        try_poweroff(config, stm_uart, zynq_uart)
    except Exception:
        print("Caught exception when trying to power off")
        traceback.print_exc()
        print("Going to reboot the SCU to force power off")
        stm_uart.write(b"\nreboot\n")


if __name__ == "__main__":
    config = get_config(sys.argv)
    main(config)
