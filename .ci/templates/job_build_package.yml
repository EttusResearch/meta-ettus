parameters:
  - name: machines
    type: object
    default: []
  - name: cache_sstate
    type: boolean
    default: true
  - name: load_ssh_key
    type: boolean
    default: true
  - name: targets
    type: object
    default: []
  - name: auto_conf
    type: string
    default: ""
  - name: prebuild_steps
    type: stepList
    default:
      - script: env
      - script: ls -lsa $(Agent.BuildDirectory)

jobs:
  - job: get_usrp_kas_docker_image
    displayName: Get usrp-kas docker image
    pool:
      name: Drivers-NIBuildFarm-RFMIBuild
      demands: sh
    steps:
      - checkout: none
      - download: usrp-kas-pipeline
        artifact: 'usrp-kas-docker-image'
        displayName: Download image info
      - script: |
          export USRP_KAS_DOCKER_IMAGE=$(cat $(Pipeline.Workspace)/usrp-kas-pipeline/usrp-kas-docker-image/docker_image)
          echo $USRP_KAS_DOCKER_IMAGE
          echo "###vso[task.setVariable variable=USRP_KAS_DOCKER_IMAGE;isOutput=true]$USRP_KAS_DOCKER_IMAGE"
        name: dockerVars
        displayName: Set output variables
  - job: build
    dependsOn: get_usrp_kas_docker_image
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 10
    strategy:
      matrix:
        ${{ each machine in parameters.machines }}:
          ${{ machine }}:
            machineName: ${{ machine }}
    pool: 
      name: Drivers-NIBuildFarm-RFMIBuild
      demands:
        - docker
        - Agent.OS -equals Linux
    variables:
      - group: meta-ettus-vars

      - name: USRP_KAS_DOCKER_IMAGE
        value: $[ dependencies.get_usrp_kas_docker_image.outputs['dockerVars.USRP_KAS_DOCKER_IMAGE'] ]
      - ${{ if parameters.cache_sstate }}:
        - name: SSTATE_DIR
          value: '$(Agent.BuildDirectory)/sstate-cache'
    container:
      image: $(USRP_KAS_DOCKER_IMAGE)
      options: -e NO_PROXY=""
      endpoint: 'Docker / Artifactory - rnd-builds-local'
    steps:
      - checkout: self
        displayName: 'Checkout self'
        persistCredentials: true
      - checkout: meta-ettus
        displayName: 'Checkout meta-ettus'

      - ${{ if parameters.load_ssh_key }}:
        - task: InstallSSHKey@0
          inputs:
            sshKeySecureFile: 'id_rsa.ettus'
            knownHostsEntry: 'github.com,192.30.253.113 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
            sshPublicKey: $(ettus_ssh_pubkey) # from meta-ettus-vars
      - ${{ if parameters.cache_sstate }}:
        - task: Cache@2
          displayName: "Cache sstate"
          inputs:
            key: "meta-ettus-sstate-$(machineName)"
            path: $(SSTATE_DIR)

      - script: |
          KAS_BASE_PATH=$(find $(Pipeline.Workspace) -wholename '*/kas/base.yml' -exec realpath {} \; | head | sed 's;/base.yml;;')
          echo $KAS_BASE_PATH
          echo "###vso[task.setVariable variable=KAS_BASE_PATH]"$KAS_BASE_PATH
        displayName: Find kas base path

      - ${{ parameters.prebuild_steps }}

      - template: kas_build.yml
        parameters:
          kas_config:
            - $KAS_BASE_PATH/$(machineName).yml
          build_package_feed: True
          build_default_targets: False
          targets: ${{ parameters.targets }}
          auto_conf: ${{ parameters.auto_conf }}

      - publish: $(KAS_DEPLOY_DIR)/ipk
        artifact: "$(machineName)-ipks"
        displayName: Publish ipks
