From 2e47b3607ad828b647df1c6bd4c4bcb80596340b Mon Sep 17 00:00:00 2001
From: Moritz Fischer <moritz.fischer@ettus.com>
Date: Fri, 10 Mar 2017 16:37:08 -0800
Subject: [PATCH 08/17] rfnoc: Initial shot add adding RFNoC support

Signed-off-by: Moritz Fischer <moritz.fischer@ettus.com>
---
 drivers/Kconfig                           |   2 +
 drivers/Makefile                          |   1 +
 drivers/rfnoc/Kconfig                     |  22 +
 drivers/rfnoc/Makefile                    |   6 +
 drivers/rfnoc/rfnoc-crossbar-platform.c   | 218 ++++++++++
 drivers/rfnoc/rfnoc-crossbar.c            | 497 ++++++++++++++++++++++
 include/linux/rfnoc/rfnoc-crossbar.h      |  62 +++
 include/uapi/linux/rfnoc/rfnoc-crossbar.h |  30 ++
 8 files changed, 838 insertions(+)
 create mode 100644 drivers/rfnoc/Kconfig
 create mode 100644 drivers/rfnoc/Makefile
 create mode 100644 drivers/rfnoc/rfnoc-crossbar-platform.c
 create mode 100644 drivers/rfnoc/rfnoc-crossbar.c
 create mode 100644 include/linux/rfnoc/rfnoc-crossbar.h
 create mode 100644 include/uapi/linux/rfnoc/rfnoc-crossbar.h

diff --git a/drivers/Kconfig b/drivers/Kconfig
index e8231663f201..d27702faa098 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -216,6 +216,8 @@ source "drivers/fpga/Kconfig"
 
 source "drivers/fsi/Kconfig"
 
+source "drivers/rfnoc/Kconfig"
+
 source "drivers/tee/Kconfig"
 
 source "drivers/mux/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index 28b030d7988d..5692e4171109 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -181,6 +181,7 @@ obj-$(CONFIG_ANDROID)		+= android/
 obj-$(CONFIG_NVMEM)		+= nvmem/
 obj-$(CONFIG_FPGA)		+= fpga/
 obj-$(CONFIG_FSI)		+= fsi/
+obj-$(CONFIG_RFNOC)		+= rfnoc/
 obj-$(CONFIG_TEE)		+= tee/
 obj-$(CONFIG_MULTIPLEXER)	+= mux/
 obj-$(CONFIG_UNISYS_VISORBUS)	+= visorbus/
diff --git a/drivers/rfnoc/Kconfig b/drivers/rfnoc/Kconfig
new file mode 100644
index 000000000000..51f2c2b03c18
--- /dev/null
+++ b/drivers/rfnoc/Kconfig
@@ -0,0 +1,22 @@
+#
+# RFNoC configuration
+#
+menu "RFNoC Support"
+
+config RFNOC
+	tristate "RFNOC Framework"
+	help
+	  Say Y here if you want support for configuring RFNOC based devices
+	  from the kernel.
+
+if RFNOC
+
+config RFNOC_CROSSBAR
+	tristate "RFNOC Crossbar"
+	depends on RFNOC
+	help
+	  RFNOC Crossbar allows configuring routing in RFNOC crossbars from
+          the kernel.
+endif
+
+endmenu
diff --git a/drivers/rfnoc/Makefile b/drivers/rfnoc/Makefile
new file mode 100644
index 000000000000..1f963fc5e1c2
--- /dev/null
+++ b/drivers/rfnoc/Makefile
@@ -0,0 +1,6 @@
+#
+# Makefile for the RFNoC framework and RFNoC drivers.
+#
+
+# Core RFNoC Framework
+obj-$(CONFIG_RFNOC_CROSSBAR)		+= rfnoc-crossbar.o rfnoc-crossbar-platform.o
diff --git a/drivers/rfnoc/rfnoc-crossbar-platform.c b/drivers/rfnoc/rfnoc-crossbar-platform.c
new file mode 100644
index 000000000000..d5656df8757a
--- /dev/null
+++ b/drivers/rfnoc/rfnoc-crossbar-platform.c
@@ -0,0 +1,218 @@
+/*
+ * Copyright (c) 2017 National Instruments Corp
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/clk.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/log2.h>
+#include <linux/rfnoc/rfnoc-crossbar.h>
+
+#define PLATFORM_CROSSBAR_VERSION_OFF		0x10
+#define PLATFORM_CROSSBAR_NUM_PORTS_OFF		0x14
+#define PLATFORM_CROSSBAR_LADDR_OFF		0x18
+#define PLATFORM_CROSSBAR_TCAM_REMOTE_OFF	0x20
+#define PLATFORM_CROSSBAR_TCAM_LOCAL_OFF	0x420
+
+#define SR_ADDR(x) ((x) << 2)
+
+struct platform_crossbar_priv {
+	struct clk *clk;
+	void __iomem *io_base;
+};
+
+static void platform_crossbar_write(struct platform_crossbar_priv *p,
+					      u32 offset, u32 val)
+{
+	writel_relaxed(val, p->io_base + offset);
+}
+
+static u32 platform_crossbar_rp_read(struct platform_crossbar_priv *p,
+				     u32 offset)
+{
+	return readl_relaxed(p->io_base + offset); }
+
+static void platform_crossbar_set_local_addr(struct rfnoc_crossbar *xb,
+					     u8 local_addr)
+{
+	struct platform_crossbar_priv *priv = xb->priv;
+
+	dev_dbg(&xb->dev, "%s: setting local addr to 0x%02x\n", __func__,
+		 local_addr);
+
+	platform_crossbar_write(priv, PLATFORM_CROSSBAR_LADDR_OFF,
+				local_addr);
+}
+
+static int platform_crossbar_add_route(struct rfnoc_crossbar *xb, u8 dest,
+				       u8 port)
+{
+	int err;
+	struct platform_crossbar_priv *priv = xb->priv;
+
+	err = clk_enable(priv->clk);
+	if (err) {
+		dev_err(&xb->dev, "unable to enable clk\n");
+		return err;
+	}
+
+	dev_dbg(&xb->dev, "%s: Adding route for remote dest 0x%02x, port 0x%02x\n",
+		 __func__, dest, port);
+
+	platform_crossbar_write(priv, PLATFORM_CROSSBAR_TCAM_REMOTE_OFF
+				+ SR_ADDR(dest),
+				port);
+
+	clk_disable(priv->clk);
+
+	return 0;
+}
+
+static int platform_crossbar_del_route(struct rfnoc_crossbar *xb,
+				       struct rfnoc_crossbar_route *route)
+{
+	int err;
+	struct platform_crossbar_priv *priv;
+
+	priv = xb->priv;
+
+	err = clk_enable(priv->clk);
+	if (err) {
+		dev_err(&xb->dev, "unable to enable clk\n");
+		return err;
+	}
+
+	clk_disable(priv->clk);
+
+	return 0;
+}
+
+static u32 platform_crossbar_get_port_stats(struct rfnoc_crossbar *xb, u8 from, u8 to)
+{
+	return platform_crossbar_rp_read(xb->priv,
+					 PLATFORM_CROSSBAR_TCAM_LOCAL_OFF +
+					 SR_ADDR((from << order_base_2(xb->nports)) + to));
+}
+
+static void __platform_crossbar_static_init(struct platform_crossbar_priv *priv)
+{
+	size_t i;
+
+	for (i = 0; i < 0x100; i++)
+		platform_crossbar_write(priv, PLATFORM_CROSSBAR_TCAM_LOCAL_OFF +
+					SR_ADDR(i), (i >> 4) & 0xf);
+}
+
+static const struct rfnoc_crossbar_ops platform_crossbar_ops = {
+	.set_local_addr = platform_crossbar_set_local_addr,
+	.add_route = platform_crossbar_add_route,
+	.del_route = platform_crossbar_del_route,
+	.get_port_stats = platform_crossbar_get_port_stats,
+};
+
+static int platform_crossbar_probe(struct platform_device *pdev)
+{
+	struct platform_crossbar_priv *priv;
+	struct resource *res;
+	u32 nports, version;
+	int err;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	priv->io_base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(priv->io_base))
+		return PTR_ERR(priv->io_base);
+
+	priv->clk = devm_clk_get(&pdev->dev, "bus_clk");
+	if (IS_ERR(priv->clk)) {
+		dev_err(&pdev->dev, "input clock not found\n");
+		return PTR_ERR(priv->clk);
+	}
+
+	err = clk_prepare_enable(priv->clk);
+	if (err) {
+		dev_err(&pdev->dev, "unable to enable clk\n");
+		return err;
+	}
+
+	version = platform_crossbar_rp_read(priv, PLATFORM_CROSSBAR_VERSION_OFF);
+	if (version != 1) {
+		dev_err(&pdev->dev, "Found unknown revision %08x, bailing!\n",
+			version);
+		goto out_unknown_rev;
+	}
+
+	nports = platform_crossbar_rp_read(priv,
+					   PLATFORM_CROSSBAR_NUM_PORTS_OFF);
+	__platform_crossbar_static_init(priv);
+
+	clk_disable(priv->clk);
+
+	err = rfnoc_crossbar_register(&pdev->dev, "NI Platform RFNoC Crossbar",
+				      &platform_crossbar_ops, nports, priv);
+
+	if (err) {
+		dev_err(&pdev->dev, "unable to register crossbar\n");
+		clk_unprepare(priv->clk);
+		return err;
+	}
+
+	return 0;
+
+out_unknown_rev:
+	clk_disable_unprepare(priv->clk);
+	return -ENODEV;
+}
+
+static int platform_crossbar_remove(struct platform_device *pdev)
+{
+	struct rfnoc_crossbar *xb;
+	struct platform_crossbar_priv *priv;
+
+	xb = platform_get_drvdata(pdev);
+	priv = xb->priv;
+
+	rfnoc_crossbar_unregister(&pdev->dev);
+
+	clk_unprepare(priv->clk);
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id platform_crossbar_of_match[] = {
+	{ .compatible = "ni,platform-crossbar-sb", },
+	{ .compatible = "ni,platform-crossbar-rp", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, platform_crossbar_of_match);
+#endif
+
+static struct platform_driver platform_crossbar_driver = {
+	.probe = platform_crossbar_probe,
+	.remove = platform_crossbar_remove,
+	.driver = {
+		.name = "rfnoc_platform_crossbar",
+		.of_match_table = of_match_ptr(platform_crossbar_of_match),
+	},
+};
+
+module_platform_driver(platform_crossbar_driver);
+
+MODULE_AUTHOR("Moritz Fischer <mdf@kernel.org>");
+MODULE_DESCRIPTION("RFNoC Crossbar");
diff --git a/drivers/rfnoc/rfnoc-crossbar.c b/drivers/rfnoc/rfnoc-crossbar.c
new file mode 100644
index 000000000000..98e5a846b79c
--- /dev/null
+++ b/drivers/rfnoc/rfnoc-crossbar.c
@@ -0,0 +1,497 @@
+/*
+ * Copyright (c) 2017 National Instruments Corp
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/idr.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/io.h>
+#include <linux/device.h>
+#include <linux/debugfs.h>
+#include <linux/uaccess.h>
+#include <linux/rfnoc/rfnoc-crossbar.h>
+#include <uapi/linux/rfnoc/rfnoc-crossbar.h>
+
+static DEFINE_IDA(rfnoc_crossbar_ida);
+static struct class *rfnoc_crossbar_class;
+
+struct rfnoc_crossbar_route {
+	struct list_head node;
+
+	u8 dest;
+	u8 port;
+};
+
+#define CONFIG_DEBUG_FS
+
+#ifdef CONFIG_DEBUG_FS
+struct dentry *debug_root;
+struct mutex debugfs_mutex;
+#endif /* CONFIG_DEBUG_FS */
+
+#define to_rfnoc_crossbar(x) (container_of(dev, struct rfnoc_crossbar, dev))
+
+struct rfnoc_crossbar_route *
+__rfnoc_crossbar_route_find(struct rfnoc_crossbar *xb, u8 dest)
+{
+	struct rfnoc_crossbar_route *found = NULL;
+	struct rfnoc_crossbar_route *route;
+
+	list_for_each_entry(route, &xb->routes, node) {
+		if (route->dest == dest) {
+			found = route;
+			break;
+		}
+	}
+
+	return found;
+}
+
+int rfnoc_crossbar_add_route(struct rfnoc_crossbar *xb, u8 dest, u8 port)
+{
+	struct rfnoc_crossbar_route *route;
+	int err;
+	unsigned long flags;
+
+	if (xb && xb->ops && xb->ops->add_route) {
+		err = xb->ops->add_route(xb, dest, port);
+		if (err)
+			return err;
+	}
+
+	/* first look if we have this one already,
+	 * if so overwrite the destination */
+	spin_lock_irqsave(&xb->routes_list_lock, flags);
+	route = __rfnoc_crossbar_route_find(xb, dest);
+	if (route)
+		route->port = port;
+	spin_unlock_irqrestore(&xb->routes_list_lock, flags);
+
+	if (route)
+		return 0;
+
+	dev_dbg(&xb->dev, "in %s: dest=%u, port=%u\n", __func__, dest, port);
+
+	/* nope? then remember the new one in a new route */
+	route = devm_kzalloc(&xb->dev, sizeof(*route), GFP_KERNEL);
+	if (!route)
+		return -ENOMEM;
+
+	route->dest = dest;
+	route->port = port;
+	spin_lock_irqsave(&xb->routes_list_lock, flags);
+	list_add_tail(&route->node, &xb->routes);
+	spin_unlock_irqrestore(&xb->routes_list_lock, flags);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(rfnoc_crossbar_add_route);
+
+int rfnoc_crossbar_del_route(struct rfnoc_crossbar *xb, u8 dest, u8 port)
+{
+	struct rfnoc_crossbar_route *route, *next;
+	unsigned long flags;
+
+	spin_lock_irqsave(&xb->routes_list_lock, flags);
+	list_for_each_entry(route, &xb->routes, node) {
+		if (route->dest == dest && route->port == port)
+			break;
+	}
+	spin_unlock_irqrestore(&xb->routes_list_lock, flags);
+
+	if (xb && xb->ops && xb->ops->del_route)
+		xb->ops->del_route(xb, route);
+
+	spin_lock_irqsave(&xb->routes_list_lock, flags);
+	list_for_each_entry_safe(route, next, &xb->routes, node) {
+		if (route->dest == dest && route->port == port) {
+			list_del(&route->node);
+			devm_kfree(&xb->dev, route);
+			break;
+		}
+	}
+	spin_unlock_irqrestore(&xb->routes_list_lock, flags);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(rfnoc_crossbar_del_route);
+
+int rfnoc_crossbar_set_local_addr(struct rfnoc_crossbar *xb, u8 local_addr)
+{
+	if (xb && xb->ops && xb->ops->set_local_addr) {
+		dev_dbg(&xb->dev, "%s\n", __func__);
+		xb->ops->set_local_addr(xb, local_addr);
+		xb->local_addr = local_addr;
+		return 0;
+	}
+
+	return -ENODEV;
+}
+EXPORT_SYMBOL_GPL(rfnoc_crossbar_set_local_addr);
+
+static ssize_t local_addr_show(struct device *dev,
+			 struct device_attribute *attr, char *buf)
+{
+	struct rfnoc_crossbar *xb = to_rfnoc_crossbar(dev);
+
+	return sprintf(buf, "0x%02x\n", xb->local_addr);
+}
+
+static ssize_t local_addr_store(struct device *dev,
+			 struct device_attribute *attr,
+			 const char *buf, size_t len)
+{
+	struct rfnoc_crossbar *xb = to_rfnoc_crossbar(dev);
+	int err;
+	u8 local_addr;
+
+	local_addr = simple_strtoul(buf, NULL, 16);
+	err = rfnoc_crossbar_set_local_addr(xb, local_addr);
+	if (err < 0)
+		return err;
+
+	return len;
+}
+static DEVICE_ATTR_RW(local_addr);
+
+static ssize_t name_show(struct device *dev,
+			 struct device_attribute *attr, char *buf)
+{
+	struct rfnoc_crossbar *xb = to_rfnoc_crossbar(dev);
+
+	return sprintf(buf, "%s\n", xb->name);
+}
+static DEVICE_ATTR_RO(name);
+
+static ssize_t nports_show(struct device *dev,
+			   struct device_attribute *attr, char *buf)
+{
+	struct rfnoc_crossbar *xb = to_rfnoc_crossbar(dev);
+
+	return sprintf(buf, "%u\n", xb->nports);
+}
+static DEVICE_ATTR_RO(nports);
+
+static struct attribute *rfnoc_crossbar_attrs[] = {
+	&dev_attr_name.attr,
+	&dev_attr_nports.attr,
+	&dev_attr_local_addr.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(rfnoc_crossbar);
+
+static int rfnoc_crossbar_open(struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
+static int rfnoc_crossbar_close(struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
+long rfnoc_crossbar_ioctl(struct file *filp, unsigned int cmd,
+			  unsigned long arg)
+{
+	void __user *argp = (void __user *)arg;
+	struct rfnoc_crossbar_cmd rcmd;
+	struct rfnoc_crossbar *xb = container_of(filp->private_data,
+						 struct rfnoc_crossbar,
+						 mdev);
+	int err;
+
+	err = copy_from_user(&rcmd, argp, sizeof(rcmd));
+	if (err) {
+		dev_err(&xb->dev, "Failed to copy cmd from user\n");
+		return -EFAULT;
+	}
+
+	switch (cmd) {
+	case RFNCBWRTIOC:
+		return rfnoc_crossbar_add_route(xb, rcmd.dest_addr,
+						rcmd.dest_port);
+	case RFNCBDRTIOC:
+		return rfnoc_crossbar_del_route(xb, rcmd.dest_addr,
+						rcmd.dest_port);
+	default:
+		return -EINVAL;
+	};
+
+	return 0;
+}
+
+#ifdef CONFIG_DEBUG_FS
+static u32 __rfnoc_crossbar_get_port_stats(struct rfnoc_crossbar *xb,
+                                           u8 from, u8 to)
+{
+	if (xb && xb->ops && xb->ops->get_port_stats)
+		return xb->ops->get_port_stats(xb, from, to);
+
+	return -EINVAL;
+}
+
+
+static const struct file_operations rfnoc_crossbar_fops = {
+	.owner			= THIS_MODULE,
+	.open			= rfnoc_crossbar_open,
+	.release		= rfnoc_crossbar_close,
+	.unlocked_ioctl         = rfnoc_crossbar_ioctl,
+};
+
+static int rfnoc_crossbar_routes_show(struct seq_file *s, void *unused)
+{
+	struct rfnoc_crossbar *xb = s->private;
+	struct rfnoc_crossbar_route *route;
+	unsigned long flags;
+	struct list_head *node;
+
+	mutex_lock(&debugfs_mutex);
+
+	seq_printf(s, "%s routes:\n", dev_name(&xb->dev));
+
+	seq_printf(s, "Local:\t\t%u\n", xb->local_addr);
+	seq_printf(s, "Dest:\t\t\tPort:\n");
+
+
+	spin_lock_irqsave(&xb->routes_list_lock, flags);
+	list_for_each(node, &xb->routes) {
+		route = container_of(node, struct rfnoc_crossbar_route, node);
+		seq_printf(s, "xx.xx.xx.%02x >\t\t%u\n", route->dest,
+			   route->port);
+	}
+	spin_unlock_irqrestore(&xb->routes_list_lock, flags);
+
+	mutex_unlock(&debugfs_mutex);
+
+	return 0;
+}
+
+static int rfnoc_crossbar_routes_debug_open(struct inode *inode,
+					    struct file *file)
+{
+	return single_open(file, rfnoc_crossbar_routes_show, inode->i_private);
+}
+
+static const struct file_operations debug_routes_fops = {
+	.open = rfnoc_crossbar_routes_debug_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int rfnoc_crossbar_stats_show(struct seq_file *s, void *unused)
+{
+	struct rfnoc_crossbar *xb = s->private;
+	int i, k;
+
+	mutex_lock(&debugfs_mutex);
+
+	seq_printf(s, "%s Statistics:\n", dev_name(&xb->dev));
+	seq_printf(s, "IN->OUT\t");
+	for (i = 0; i < xb->nports; i++)
+		seq_printf(s, "%02u        ", i);
+	seq_printf(s, "\n");
+	for (i = 0; i < xb->nports; i++)
+	{
+		seq_printf(s, "%02u\t", i);
+		for(k = 0; k < xb->nports; k++)
+		{
+			seq_printf(s, "%08x  ",
+				   __rfnoc_crossbar_get_port_stats(xb, i, k));
+		}
+		seq_printf(s, "\n");
+	}
+
+	mutex_unlock(&debugfs_mutex);
+
+	return 0;
+}
+
+static int rfnoc_crossbar_stats_debug_open(struct inode *inode,
+					    struct file *file)
+{
+	return single_open(file, rfnoc_crossbar_stats_show, inode->i_private);
+}
+
+
+static const struct file_operations debug_stats_fops = {
+	.open = rfnoc_crossbar_stats_debug_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+#endif /* CONFIG_DEBUG_FS */
+
+int rfnoc_crossbar_register(struct device *dev, const char *name,
+			    const struct rfnoc_crossbar_ops *ops, u8 nports,
+			    void *priv)
+{
+	struct rfnoc_crossbar *xb;
+	int id, err;
+
+	if (!ops || !ops->add_route || !ops->del_route) {
+		dev_err(dev, "Trying to register with invalid ops\n");
+		return -EINVAL;
+	}
+
+	if (!name || !strlen(name)) {
+		dev_err(dev, "Trying to register with no name\n");
+		return -EINVAL;
+	}
+
+	xb = kzalloc(sizeof(*xb), GFP_KERNEL);
+	if (!xb)
+		return -ENOMEM;
+
+	id = ida_simple_get(&rfnoc_crossbar_ida, 0, 0, GFP_KERNEL);
+	if (id < 0) {
+		err = id;
+		goto error_kfree;
+	}
+
+	xb->name = name;
+	xb->nports = nports;
+	xb->priv = priv;
+	xb->ops = ops;
+
+	device_initialize(&xb->dev);
+	xb->dev.class = rfnoc_crossbar_class;
+	xb->dev.parent = dev;
+	xb->dev.of_node = dev->of_node;
+	xb->dev.id = id;
+	dev_set_drvdata(dev, xb);
+
+	INIT_LIST_HEAD(&xb->routes);
+	spin_lock_init(&xb->routes_list_lock);
+
+	err = dev_set_name(&xb->dev, "crossbar%d", id);
+	if (err)
+		goto error_device;
+
+	err = device_add(&xb->dev);
+	if (err)
+		goto error_device;
+
+	xb->mdev.minor = MISC_DYNAMIC_MINOR;
+	xb->mdev.name  = dev_name(&xb->dev);
+	xb->mdev.fops  = &rfnoc_crossbar_fops;
+
+	err = misc_register(&xb->mdev);
+	if (err) {
+		dev_err(&xb->dev, "Failed to register miscdevice\n");
+		goto out_misc;
+	}
+
+#ifdef CONFIG_DEBUG_FS
+	xb->debug_root = debugfs_create_dir(dev_name(&xb->dev), debug_root);
+	if (!xb->debug_root) {
+		dev_err(&xb->dev, "Failed to add debugfs root\n");
+		goto out_misc;
+	}
+
+	xb->routes_debug_root = debugfs_create_file("routes", 0664,
+						    xb->debug_root,
+						    xb, &debug_routes_fops);
+	if (!xb->routes_debug_root) {
+		dev_err(&xb->dev, "Failed to add debugfs entry for routes\n");
+		goto out_debugfs;
+	}
+
+	xb->stats_debug_root = debugfs_create_file("stats", 0664,
+						   xb->debug_root,
+						   xb, &debug_stats_fops);
+
+	if (!xb->stats_debug_root) {
+		dev_err(&xb->dev, "Failed to add debugfs entry for routes\n");
+		goto out_debugfs;
+	}
+
+	dev_info(&xb->dev, "%s registered\n", xb->name);
+
+	return 0;
+
+out_debugfs:
+	debugfs_remove_recursive(xb->debug_root);
+#endif /* CONFIG_DEBUG_FS */
+out_misc:
+	device_unregister(&xb->dev);
+error_device:
+	ida_simple_remove(&rfnoc_crossbar_ida, id);
+error_kfree:
+	kfree(xb);
+
+	return err;
+}
+EXPORT_SYMBOL_GPL(rfnoc_crossbar_register);
+
+void rfnoc_crossbar_unregister(struct device *dev)
+{
+	struct rfnoc_crossbar *xb = dev_get_drvdata(dev);
+
+#ifdef CONFIG_DEBUG_FS
+	debugfs_remove_recursive(xb->debug_root);
+#endif /* CONFIG_DEBUG_FS */
+
+	misc_deregister(&xb->mdev);
+
+	device_unregister(&xb->dev);
+}
+EXPORT_SYMBOL_GPL(rfnoc_crossbar_unregister);
+
+static void rfnoc_crossbar_dev_release(struct device *dev)
+{
+	struct rfnoc_crossbar *xb = to_rfnoc_crossbar(dev);
+	struct rfnoc_crossbar_route *route, *next;
+	unsigned long flags;
+
+	spin_lock_irqsave(&xb->routes_list_lock, flags);
+	list_for_each_entry_safe(route, next, &xb->routes, node) {
+		list_del(&route->node);
+	}
+	spin_unlock_irqrestore(&xb->routes_list_lock, flags);
+
+	ida_simple_remove(&rfnoc_crossbar_ida, xb->dev.id);
+	kfree(xb);
+}
+
+static int __init rfnoc_crossbar_class_init(void)
+{
+	rfnoc_crossbar_class = class_create(THIS_MODULE, "rfnoc_crossbar");
+	if (IS_ERR(rfnoc_crossbar_class))
+		return PTR_ERR(rfnoc_crossbar_class);
+
+	rfnoc_crossbar_class->dev_groups = rfnoc_crossbar_groups;
+	rfnoc_crossbar_class->dev_release = rfnoc_crossbar_dev_release;
+
+#ifdef CONFIG_DEBUG_FS
+	debug_root = debugfs_create_dir("rfnoc_crossbars", NULL);
+#endif /* CONFIG_DEBUG_FS */
+
+	return 0;
+}
+
+static void __exit rfnoc_crossbar_exit(void)
+{
+#ifdef CONFIG_DEBUG_FS
+	debugfs_remove_recursive(debug_root);
+#endif /* CONFIG_DEBUG_FS */
+	class_destroy(rfnoc_crossbar_class);
+	ida_destroy(&rfnoc_crossbar_ida);
+}
+
+MODULE_AUTHOR("Moritz Fischer <mdf@kernel.org>");
+MODULE_DESCRIPTION("RFNoC Crossbar");
+MODULE_LICENSE("GPL v2");
+
+subsys_initcall(rfnoc_crossbar_class_init);
+module_exit(rfnoc_crossbar_exit);
diff --git a/include/linux/rfnoc/rfnoc-crossbar.h b/include/linux/rfnoc/rfnoc-crossbar.h
new file mode 100644
index 000000000000..a80c0684baca
--- /dev/null
+++ b/include/linux/rfnoc/rfnoc-crossbar.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2017 National Instruments Corp
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _LINUX_RFNOC_CROSSBAR_H
+#define _LINUX_RFNOC_CROSSBAR_H
+
+#include <linux/miscdevice.h>
+
+struct rfnoc_crossbar {
+	struct device dev;
+
+	const char *name;
+
+	u8 local_addr;
+	u8 nports;
+	struct list_head routes;
+	spinlock_t routes_list_lock;
+
+	const struct rfnoc_crossbar_ops *ops;
+	void *priv;
+
+#ifdef CONFIG_DEBUG_FS
+	struct dentry *debug_root;
+	struct dentry *routes_debug_root, *stats_debug_root;
+#endif
+
+	struct miscdevice mdev;
+};
+
+struct rfnoc_crossbar_route;
+
+struct rfnoc_crossbar_ops {
+        void(*set_local_addr)(struct rfnoc_crossbar *, u8);
+        int(*add_route)(struct rfnoc_crossbar *, u8, u8);
+        int(*del_route)(struct rfnoc_crossbar *, struct rfnoc_crossbar_route *);
+        u32(*get_port_stats)(struct rfnoc_crossbar *, u8 from, u8 to);
+};
+
+int rfnoc_crossbar_register(struct device *dev, const char *name,
+			    const struct rfnoc_crossbar_ops *ops, u8 nports,
+			    void *priv);
+
+void rfnoc_crossbar_unregister(struct device *dev);
+
+int rfnoc_crossbar_set_local_addr(struct rfnoc_crossbar *xb, u8 local_addr);
+
+int rfnoc_crossbar_add_route(struct rfnoc_crossbar *xb, u8 dest, u8 port);
+
+int rfnoc_crossbar_del_route(struct rfnoc_crossbar *xb, u8 dest, u8 port);
+
+#endif /* _LINUX_RFNOC_CROSSBAR_H */
+
diff --git a/include/uapi/linux/rfnoc/rfnoc-crossbar.h b/include/uapi/linux/rfnoc/rfnoc-crossbar.h
new file mode 100644
index 000000000000..3ad543afad5a
--- /dev/null
+++ b/include/uapi/linux/rfnoc/rfnoc-crossbar.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2017 National Instruments Corp
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _UAPI_LINUX_RFNOC_CROSSBAR_H
+#define _UAPI_LINUX_RFNOC_CROSSBAR_H
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+#define RFNCB_IOCTL_BASE 'R'
+
+struct rfnoc_crossbar_cmd {
+	__u8 dest_addr;
+	__u8 dest_port;
+};
+
+#define RFNCBWRTIOC _IOW(RFNCB_IOCTL_BASE, 1, struct rfnoc_crossbar_cmd)
+#define RFNCBDRTIOC _IOW(RFNCB_IOCTL_BASE, 2, struct rfnoc_crossbar_cmd)
+
+#endif /* _UAPI_LINUX_RFNOC_CROSSBAR_H */
-- 
2.17.1

