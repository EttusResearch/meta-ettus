From 538231a8cfda5c17dfc21389cedf66eff498570c Mon Sep 17 00:00:00 2001
From: Moritz Fischer <moritz.fischer@ettus.com>
Date: Tue, 8 Dec 2015 11:51:19 -0800
Subject: [PATCH] zynq: e3xx: Set db mux pins depending on configuration

Depending on which daughterboard is found we either:

* GPIO63 high => E33X GPIO63 low => E31X
* GPIO64 high => known daughterboard, low => unknown

Signed-off-by: Moritz Fischer <moritz.fischer@ettus.com>
---
 board/ettus/e3xx/board.c | 48 +++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 43 insertions(+), 5 deletions(-)

diff --git a/board/ettus/e3xx/board.c b/board/ettus/e3xx/board.c
index a7b4443..e056209 100644
--- a/board/ettus/e3xx/board.c
+++ b/board/ettus/e3xx/board.c
@@ -14,6 +14,7 @@
 #include <zynqpl.h>
 #include <asm/arch/hardware.h>
 #include <asm/arch/sys_proto.h>
+#include <asm/gpio.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -123,6 +124,38 @@ static int mem_test(u32 start, u32 size)
 }
 #endif /* CONFIG_ZYNQ_E3XX_MEM_TEST */
 
+#define BOARD_SWITCH_GPIO 63
+#define BOARD_SAFE_GPIO 64
+
+static int board_set_db_mux_gpio(int is_safe, int is_e33x)
+{
+	int err;
+
+	err = gpio_request(BOARD_SWITCH_GPIO,
+			   "board_switch_gpio");
+	if (err) {
+		printf("Could not get db_mux_gpio(0)\n");
+		return err;
+	}
+
+	gpio_direction_output(BOARD_SWITCH_GPIO, is_e33x);
+
+	gpio_free(BOARD_SWITCH_GPIO);
+
+	err = gpio_request(BOARD_SAFE_GPIO,
+			   "board_safe_gpio");
+	if (err) {
+		printf("Could not get db_mux_gpio(1)\n");
+		return err;
+	}
+
+	gpio_direction_output(BOARD_SAFE_GPIO, is_safe);
+
+	gpio_free(BOARD_SAFE_GPIO);
+
+	return 0;
+}
+
 static void identify_products(void)
 {
 	u8 db_buf[sizeof(struct e3xx_db_eeprom_map)];
@@ -162,11 +195,6 @@ static void identify_products(void)
 	};
 	db = ntohs(db_map->hw_product);
 
-	/*for (size_t i = 0; i < sizeof(struct e3xx_db_eeprom_map); i++) {
-		printf("%u %x\n", i, db_buf[i]);
-	}
-	*/
-
 	/* print out motherboard info */
 	if (mb == MB_ID_E3XX_REVC) {
 		printf("Found %s - Speedgrade %u\n",
@@ -188,35 +216,45 @@ static void identify_products(void)
 		if (db == DB_ID_E310_REVB) {
 			printf("Found %s\n", e3xx_db_names[DB_ID_E310_REVB]);
 			setenv("devicetree_image", "uImage-zynq-e31x-1.dtb");
+			board_set_db_mux_gpio(1,0);
 		} else if (db == DB_ID_E310_REVC) {
 			setenv("devicetree_image", "uImage-zynq-e31x-1.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E310_REVC]);
+			board_set_db_mux_gpio(1,0);
 		} else if (db == DB_ID_E300_REVB) {
 			setenv("devicetree_image", "uImage-zynq-e31x-1.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E300_REVB]);
+			board_set_db_mux_gpio(1,0);
 		} else if (db == DB_ID_E330_REVC) {
 			setenv("devicetree_image", "uImage-zynq-e33x-1.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E330_REVC]);
+			board_set_db_mux_gpio(1,1);
 		} else {
 			setenv("devicetree_image", "uImage-zynq-e3xx-factory.dtb");
 			printf("*** Found unknown daughterboard, 0x%04x please update sd card ***\n", db);
+			board_set_db_mux_gpio(0,0);
 		}
 	} else if (speedgrade == 3) {
 		if (db == DB_ID_E310_REVB) {
 			setenv("devicetree_image", "uImage-zynq-e31x-3.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E310_REVB]);
+			board_set_db_mux_gpio(1,0);
 		} else if (db == DB_ID_E310_REVC) {
 			setenv("devicetree_image", "uImage-zynq-e31x-3.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E310_REVC]);
+			board_set_db_mux_gpio(1,0);
 		} else if (db == DB_ID_E300_REVB) {
 			setenv("devicetree_image", "uImage-zynq-e31x-3.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E300_REVB]);
+			board_set_db_mux_gpio(1,0);
 		} else if (db == DB_ID_E330_REVC) {
 			setenv("devicetree_image", "uImage-zynq-e33x-3.dtb");
 			printf("Found %s\n", e3xx_db_names[DB_ID_E330_REVC]);
+			board_set_db_mux_gpio(1,1);
 		} else {
 			setenv("devicetree_image", "uImage-zynq-e3xx-factory.dtb");
 			printf("*** Found unknown daughterboard, 0x%04x please update sd card ***\n", db);
+			board_set_db_mux_gpio(0,0);
 		}
 	}
 
-- 
2.4.3

